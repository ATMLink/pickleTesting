{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "83790fd3-4625-4c89-8281-6dea3a37f795",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python version: 3.7.16 (default, Jan 17 2023, 16:06:28) [MSC v.1916 64 bit (AMD64)]\n",
      "Test time: 2025-05-22 01:21:01.956590\n",
      "=== Pickle Test Output ===\n",
      "\n",
      "Input: 42\n",
      "Original object hash:    73475cb40a568e8da8a045ced110137e159f890ac4da883b6b17dc651b3a8049\n",
      "Deserialized object hash: 73475cb40a568e8da8a045ced110137e159f890ac4da883b6b17dc651b3a8049\n",
      "Match: True\n",
      "\n",
      "Input: 1267650600228229401496703205376\n",
      "Original object hash:    5ee7924f903dfefa9253b5f63147f53433516da9daf01f6e729331dcf31b28c6\n",
      "Deserialized object hash: 5ee7924f903dfefa9253b5f63147f53433516da9daf01f6e729331dcf31b28c6\n",
      "Match: True\n",
      "\n",
      "Input: 3.14159\n",
      "Original object hash:    c0740dd25c9de39b9c8d5ab452e8b69bcc0bf86f2a60ed7e527e79d0a3035852\n",
      "Deserialized object hash: c0740dd25c9de39b9c8d5ab452e8b69bcc0bf86f2a60ed7e527e79d0a3035852\n",
      "Match: True\n",
      "\n",
      "Input: hello\n",
      "Original object hash:    2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\n",
      "Deserialized object hash: 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824\n",
      "Match: True\n",
      "\n",
      "Input: b'hello'\n",
      "Original object hash:    1ff632a611885373673516162c18b64c8c57ac5b1a3e60c0a3facba0e7645a31\n",
      "Deserialized object hash: 1ff632a611885373673516162c18b64c8c57ac5b1a3e60c0a3facba0e7645a31\n",
      "Match: True\n",
      "\n",
      "Input: [1, 2, 3]\n",
      "Original object hash:    a36b1f2c3f84522dd1005145646617d7054c0851e97c72a039c0bdfac9fa07f3\n",
      "Deserialized object hash: a36b1f2c3f84522dd1005145646617d7054c0851e97c72a039c0bdfac9fa07f3\n",
      "Match: True\n",
      "\n",
      "Input: {'a': 1, 'b': 2}\n",
      "Original object hash:    3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8\n",
      "Deserialized object hash: 3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8\n",
      "Match: True\n",
      "\n",
      "Input: (1, 2)\n",
      "Original object hash:    cf4dabed2ce0f4fc293425d4063a8c54df5e1164a6d4a6d85712e0f491ea08c8\n",
      "Deserialized object hash: cf4dabed2ce0f4fc293425d4063a8c54df5e1164a6d4a6d85712e0f491ea08c8\n",
      "Match: True\n",
      "\n",
      "Input: {1, 2, 3}\n",
      "Original object hash:    8298d0492354e620262b63e1d84fb85e1b3d9df71672a4894441a5ee30b08c0c\n",
      "Deserialized object hash: 8298d0492354e620262b63e1d84fb85e1b3d9df71672a4894441a5ee30b08c0c\n",
      "Match: True\n",
      "\n",
      "Input: frozenset({4, 5, 6})\n",
      "Original object hash:    f4de808ed36dbfba3800ab30f91aeb934c3a6064c5d487256c70b49144da3f0f\n",
      "Deserialized object hash: f4de808ed36dbfba3800ab30f91aeb934c3a6064c5d487256c70b49144da3f0f\n",
      "Match: True\n",
      "\n",
      "Input: range(0, 5)\n",
      "Original object hash:    6a1c455e2f02f7efaa94c5e19d7d9947af241dcab57b4b073e8431b6a1ebd235\n",
      "Deserialized object hash: 6a1c455e2f02f7efaa94c5e19d7d9947af241dcab57b4b073e8431b6a1ebd235\n",
      "Match: True\n",
      "\n",
      "Input: Point(x=5, y=6)\n",
      "Original object hash:    57c2bc6ef82c6ad59b71f041ea0f4ff5411e07b5272e8e4d4dcbd0469b9e06c9\n",
      "Deserialized object hash: 57c2bc6ef82c6ad59b71f041ea0f4ff5411e07b5272e8e4d4dcbd0469b9e06c9\n",
      "Match: True\n",
      "\n",
      "Input: <CustomObject name='foo' value=123>\n",
      "Original object hash:    e1a13b6758bbd708ff46e3baff97e9930e1745ca3b5f5f3c39b3f8e2b5cba48b\n",
      "Deserialized object hash: e1a13b6758bbd708ff46e3baff97e9930e1745ca3b5f5f3c39b3f8e2b5cba48b\n",
      "Match: True\n",
      "\n",
      "Input: <function top_level_func at 0x00000183194D1C18>\n",
      "Original object hash:    8e522fdb65f88503768a9b18030e352d2c80d046df614f1d8754cb011acf4f52\n",
      "Deserialized object hash: 8e522fdb65f88503768a9b18030e352d2c80d046df614f1d8754cb011acf4f52\n",
      "Match: True\n",
      "\n",
      "[+] Results saved to F:\\Python_learning\\JupyerNotebook\\All-User\\data\\pickle_test_output_py37.txt\n"
     ]
    }
   ],
   "source": [
    "# pickle_all_uses_test.py\n",
    "\n",
    "import sys\n",
    "import pickle\n",
    "import hashlib\n",
    "import datetime\n",
    "import os\n",
    "from collections import namedtuple\n",
    "\n",
    "# -----------------------\n",
    "# —— 在此处定义所有测试对象 —— #\n",
    "# 定义点必须是模块顶层，保证 pickle 能找到它们\n",
    "# -----------------------\n",
    "Point = namedtuple('Point', ['x', 'y'])\n",
    "\n",
    "class CustomObject:\n",
    "    def __init__(self, name, value):\n",
    "        self.name = name\n",
    "        self.value = value\n",
    "    def __str__(self):\n",
    "        # 包含字段，序列化后字段应保持一致\n",
    "        return f\"<CustomObject name={self.name!r} value={self.value!r}>\"\n",
    "\n",
    "def top_level_func(a, b=5):\n",
    "    return a + b\n",
    "\n",
    "# 所有测试输入 — 覆盖各定义点的使用\n",
    "TEST_INPUTS = [\n",
    "    42,                             # int\n",
    "    2**100,                         # 大整数\n",
    "    3.14159,                        # float\n",
    "    \"hello\",                      # str\n",
    "    b\"hello\",                     # bytes\n",
    "    [1, 2, 3],                      # list\n",
    "    {\"a\": 1, \"b\": 2},           # dict\n",
    "    (1, 2),                         # tuple\n",
    "    {1, 2, 3},                      # set\n",
    "    frozenset([4, 5, 6]),           # frozenset\n",
    "    range(5),                       # range\n",
    "    Point(5, 6),                    # namedtuple\n",
    "    CustomObject(\"foo\", 123),     # 自定义对象\n",
    "    top_level_func,                 # 顶层函数\n",
    "]\n",
    "\n",
    "# ---- 配置 ----\n",
    "# 可以自定义输出文件夹和文件名\n",
    "OUTPUT_FOLDER = 'data'               # 输出文件夹名称\n",
    "OUTPUT_FILENAME = '3.7test_results.txt' # 输出文件名，可修改为任意名称\n",
    "\n",
    "# ---- 辅助函数 ----\n",
    "def sha256_of_str(obj):\n",
    "    \"\"\"对 str(obj) 的 UTF8 编码做 SHA-256，返回 hex.\"\"\"\n",
    "    return hashlib.sha256(str(obj).encode('utf-8')).hexdigest()\n",
    "\n",
    "def test_obj(obj):\n",
    "    orig_hash = sha256_of_str(obj)\n",
    "    dumped = pickle.dumps(obj, protocol=4)\n",
    "    loaded = pickle.loads(dumped)\n",
    "    loaded_hash = sha256_of_str(loaded)\n",
    "    return orig_hash, loaded_hash, (orig_hash == loaded_hash)\n",
    "\n",
    "# ---- 主逻辑 ----\n",
    "def main():\n",
    "    # 确保输出目录存在\n",
    "    output_dir = os.path.join(os.getcwd(), OUTPUT_FOLDER)\n",
    "    os.makedirs(output_dir, exist_ok=True)\n",
    "\n",
    "    # 如果使用默认 OUTPUT_FILENAME，则在文件名前加 Python 版本后缀\n",
    "    py_ver = f\"_py{sys.version_info.major}{sys.version_info.minor}\"\n",
    "    name, ext = os.path.splitext(OUTPUT_FILENAME)\n",
    "    outfile = os.path.join(output_dir, f\"{name}{py_ver}{ext}\")\n",
    "\n",
    "    with open(outfile, 'w', encoding='utf-8') as f:\n",
    "        def writeline(line=''):\n",
    "            print(line)\n",
    "            f.write(line + '\\n')\n",
    "\n",
    "        writeline(f\"Python version: {sys.version.strip()}\")\n",
    "        writeline(f\"Test time: {datetime.datetime.now()!s}\")\n",
    "        writeline(\"=== Pickle Test Output ===\")\n",
    "        writeline()\n",
    "        for obj in TEST_INPUTS:\n",
    "            orig_h, load_h, match = test_obj(obj)\n",
    "            writeline(f\"Input: {obj!s}\")\n",
    "            writeline(f\"Original object hash:    {orig_h}\")\n",
    "            writeline(f\"Deserialized object hash: {load_h}\")\n",
    "            writeline(f\"Match: {match}\")\n",
    "            writeline()\n",
    "\n",
    "    print(f\"[+] Results saved to {outfile}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84dc4db4-2ffe-459e-8df5-ec3e0353a751",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e367a6cc-a3b9-48c3-9069-9fa883ea1114",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7",
   "language": "python",
   "name": "py37"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
